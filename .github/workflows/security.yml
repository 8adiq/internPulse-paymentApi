name: Security Scan

on:
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit

    - name: Run Bandit security scan
      run: |
        bandit -r payments/ payment_api/ -f json -o bandit-report.json || true
        bandit -r payments/ payment_api/ -f txt -o bandit-report.txt || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --full-report --output safety-report.txt || true

    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit --format text --output pip-audit-report.txt || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          pip-audit-report.json
          pip-audit-report.txt

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## üîí Security Scan Results\n\n';
          
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            
            comment += '### Bandit Security Issues\n';
            if (banditReport.results && banditReport.results.length > 0) {
              banditReport.results.forEach(issue => {
                comment += `- **${issue.issue_severity}**: ${issue.issue_text} in ${issue.filename}:${issue.line_number}\n`;
              });
            } else {
              comment += '‚úÖ No security issues found!\n';
            }
            
            comment += '\n### Safety Check Results\n';
            if (safetyReport.length > 0) {
              safetyReport.forEach(vuln => {
                comment += `- **${vuln.severity}**: ${vuln.package} - ${vuln.description}\n`;
              });
            } else {
              comment += '‚úÖ No vulnerable packages found!\n';
            }
          } catch (error) {
            comment += '‚ùå Error reading security reports\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
