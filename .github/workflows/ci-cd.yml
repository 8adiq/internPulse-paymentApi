name: CI/CD Pipeline - Payment Gateway API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  DJANGO_SETTINGS_MODULE: payment_api.settings

jobs:
  # Test Job
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
        django-version: [5.2]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create database directory
      run: mkdir -p db

    - name: Run database migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate --run-syncdb

    - name: Run tests with pytest
      run: |
        python -m pytest payments/tests/ -v --cov=payments --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r payments/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Code Quality Job
  code-quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: Run linting
      run: |
        flake8 payments/ payment_api/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run type checking
      run: |
        mypy payments/ payment_api/ --ignore-missing-imports

  # Build and Deploy Job
  deploy:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create database directory
      run: mkdir -p db

    - name: Run migrations
      run: python manage.py migrate --run-syncdb

    - name: Collect static files
      run: python manage.py collectstatic --noinput

    - name: Build Docker image
      run: |
        docker build -t payment-gateway-api:${{ github.sha }} .
        docker tag payment-gateway-api:${{ github.sha }} payment-gateway-api:latest

    - name: Deploy to Render
      env:
        RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        # Trigger Render deployment via webhook
        curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "do_not_clear"}'

  # Performance Testing Job
  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Create database directory
      run: mkdir -p db

    - name: Run migrations
      run: python manage.py migrate --run-syncdb

    - name: Start Django server
      run: |
        python manage.py runserver 0.0.0.0:8000 &
        sleep 10

    - name: Run performance tests
      run: |
        locust -f performance_tests/locustfile.py --host=http://localhost:8000 --headless --users 10 --spawn-rate 2 --run-time 30s

  # Documentation Job
  documentation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Notify Job
  notify:
    runs-on: ubuntu-latest
    needs: [test, code-quality, deploy]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.code-quality.result == 'success' && needs.deploy.result == 'success'
      run: |
        echo "✅ All checks passed! Deployment successful."
        # Add Slack/Discord notification here if needed

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.code-quality.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "❌ Some checks failed! Please review the logs."
        # Add Slack/Discord notification here if needed
